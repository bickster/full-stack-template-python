version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: fullstack_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fullstack_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fullstack_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: fullstack_api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-fullstack_db}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      DEBUG: ${DEBUG:-0}
      TESTING: ${TESTING:-0}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./src:/app/src
    depends_on:
      db:
        condition: service_healthy
    command: uvicorn app.api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - fullstack_network

  frontend:
    build:
      context: ./ui
      dockerfile: ../docker/Dockerfile.frontend
    container_name: fullstack_frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000/api/v1}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - api
    networks:
      - fullstack_network

  nginx:
    image: nginx:alpine
    container_name: fullstack_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - frontend
    networks:
      - fullstack_network

volumes:
  postgres_data:

networks:
  fullstack_network:
    driver: bridge
